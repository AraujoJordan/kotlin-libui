plugins {
    id 'kotlin-multiplatform' version '1.3.0' apply false
}

ext.samplesResourcesDirectory = "${projectDir}/resources"

subprojects {
    apply plugin: 'kotlin-multiplatform'

    def samplesResource = "${project.buildDir}/konan/resources/samples.res"

    task compileWindowsResources(type: Exec) {
        onlyIf { org.gradle.internal.os.OperatingSystem.current().isWindows() }

        def konanUserDir = System.getenv("KONAN_DATA_DIR") ?: "${System.getProperty("user.home")}/.konan"
        def windresDir = "${konanUserDir}/dependencies/msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1/bin"
        def rcFile = file("${samplesResourcesDirectory}/samples.rc")

        inputs.file rcFile
        outputs.file file(samplesResource)
        commandLine "${windresDir}/windres", rcFile, '-O', 'coff', '-o', samplesResource
        environment 'PATH', "${windresDir};${System.getenv('PATH')}"
    }

    kotlin {
        targets {
            fromPreset(presets.macosX64, 'macosx')
            fromPreset(presets.linuxX64, 'linux')
            fromPreset(presets.mingwX64, 'windows') {
                compilations.main.linkerOpts "$samplesResource -mwindows"
            }
            configure([macosx, linux, windows]) {
                compilations.main.outputKinds 'executable'
                compilations.main.entryPoint 'main'
            }
        }
        sourceSets {
            nativeMain {
                dependencies {
                    implementation project(':libui')
                }
                kotlin.srcDir('src/nativeMain/kotlin')
            }
            configure([macosxMain, linuxMain, windowsMain]) {
                dependsOn nativeMain
            }
            windowsMain {
                kotlin.include samplesResource
            }
        }
    }

    // TODO: run program

    tasks.compileKotlinWindows.dependsOn compileWindowsResources
}
