ext.samplesResourcesDirectory = "${projectDir}/resources"

subprojects {
    apply plugin: "org.jetbrains.kotlin.multiplatform"

    def samplesResource = "${project.buildDir}/konan/resources/samples.res"

    task compileWindowsResources(type: Exec) {
        onlyIf { os.isWindows() }

        def konanUserDir = System.getenv("KONAN_DATA_DIR") ?: "${System.getProperty("user.home")}/.konan"
        def windresDir = "${konanUserDir}/dependencies/msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1/bin"
        def rcFile = file("${samplesResourcesDirectory}/samples.rc")

        inputs.file rcFile
        outputs.file file(samplesResource)
        commandLine "${windresDir}/windres", rcFile, '-O', 'coff', '-o', samplesResource
        environment 'PATH', "${windresDir};${System.getenv('PATH')}"
    }

    kotlin {
        if (os.isWindows()) mingwX64('windows') {
            sourceSets.windowsMain {
                kotlin.srcDir('src/nativeMain/kotlin')
                dependencies {
                    implementation project(':libui')
                }
            }
            binaries {
                executable([RELEASE]) {
                    tasks.compileKotlinWindows.dependsOn compileWindowsResources
                    linkerOpts samplesResource, "-mwindows"
                }
            }
        }

        if (os.isLinux()) linuxX64('linux') {
            sourceSets.linuxMain {
                kotlin.srcDir('src/nativeMain/kotlin')
                dependencies {
                    implementation project(':libui')
                }
            }
            binaries {
                executable([RELEASE])
            }
        }

        if (os.isMacOsX()) macosX64('macosx') {
            sourceSets.macosxMain {
                kotlin.srcDir('src/nativeMain/kotlin')
                dependencies {
                    implementation project(':libui')
                }
            }
            binaries {
                executable([RELEASE])
            }
        }
    }
}
