ext.samplesResourcesDirectory = "${projectDir}/resources"

subprojects {
    apply plugin: "org.jetbrains.kotlin.multiplatform"

    def samplesResource = "${project.buildDir}/konan/resources/samples.res"

    task compileWindowsResources(type: Exec) {
        onlyIf { os.isWindows() }

        def konanUserDir = System.getenv("KONAN_DATA_DIR") ?: "${System.getProperty("user.home")}/.konan"
        def windresDir = "${konanUserDir}/dependencies/msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1/bin"
        def rcFile = file("${samplesResourcesDirectory}/samples.rc")

        inputs.file rcFile
        outputs.file file(samplesResource)
        commandLine "${windresDir}/windres", rcFile, '-O', 'coff', '-o', samplesResource
        environment 'PATH', "${windresDir};${System.getenv('PATH')}"
    }

    kotlin {
        if (os.isWindows()) {
            targets {
                fromPreset(presets.mingwX64, 'windows') {
                    compilations.main {
                        outputKinds 'executable'
                        entryPoint 'main'
                        linkerOpts "$samplesResource -mwindows"
                    }
                }
                tasks.compileKotlinWindows.dependsOn compileWindowsResources
            }
            sourceSets {
                windowsMain {
                    kotlin.srcDir('src/nativeMain/kotlin')
                    dependencies {
                        implementation project(':libui')
                    }
                }
            }
        }

        if (os.isLinux()) {
            targets {
                fromPreset(presets.linuxX64, 'linux') {
                    compilations.main {
                        outputKinds 'executable'
                        entryPoint 'main'
                    }
                }
            }
            sourceSets {
                linuxMain {
                    kotlin.srcDir('src/nativeMain/kotlin')
                    dependencies {
                        implementation project(':libui')
                    }
                }
            }
        }

        if (os.isMacOsX()) {
            targets {
                fromPreset(presets.macosX64, 'macosx') {
                    compilations.main {
                        outputKinds 'executable'
                        entryPoint 'main'
                    }
                }
            }
            sourceSets {
                macosxMain {
                    kotlin.srcDir('src/nativeMain/kotlin')
                    dependencies {
                        implementation project(':libui')
                    }
                }
            }
        }
    }

    task runProgram {
        def buildType = 'DEBUG' // 'RELEASE'
        def target = kotlin.targets.find {
            it instanceof org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget && it.publishable
        }

        dependsOn target.compilations.main.linkTaskName('EXECUTABLE', buildType)

        doLast {
            exec {
                executable target.compilations.main.getBinary('EXECUTABLE', buildType)
            }
        }
    }
}
