apply plugin: "org.jetbrains.kotlin.multiplatform"
apply plugin: "de.undercouch.download"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

group = GROUP
version = "${VERSION_NAME}${VERSION_SUFFIX}"

task downloadArchive(type: Download) {
    def release = "$LIBUI_REPO/releases/download/$LIBUI_VERSION/libui-$LIBUI_VERSION"
    if (os.isWindows()) {
        src("$release-windows-amd64-mingw-static.zip")
    } else if (os.isLinux()) {
        src("$release-linux-amd64-static.tgz")
    } else if (os.isMacOsX()) {
        src("$release-darwin-amd64-static.tgz")
    }
    dest(new File(buildDir, "libui-$LIBUI_VERSION.${os.isWindows() ? "zip" : "tgz"}"))
    overwrite(false)
}

task unpackArchive(dependsOn: downloadArchive, type: Copy) {
    if (os.isWindows()) {
        from(zipTree(downloadArchive.dest))
    } else {
        from(tarTree(resources.gzip(downloadArchive.dest)))
    }
    into(buildDir)
}

kotlin {
    final def publishModeEnabled = rootProject.hasProperty("publishMode")
    println("publishModeEnabled: $publishModeEnabled")

    if (os.isWindows() || publishModeEnabled) mingwX64("windows") {
        sourceSets.windowsMain {
            kotlin.srcDir("src/nativeMain/kotlin")
        }
        compilations.main.cinterops {
            libui { includeDirs buildDir }
        }
    }

    if (os.isLinux() || publishModeEnabled) linuxX64("linux") {
        sourceSets.linuxMain {
            kotlin.srcDir("src/nativeMain/kotlin")
        }
        compilations.main.cinterops {
            libui { includeDirs buildDir }
        }
    }

    if (os.isMacOsX() || publishModeEnabled) macosX64("macosx") {
        sourceSets.macosxMain {
            kotlin.srcDir("src/nativeMain/kotlin")
        }
        compilations.main.cinterops {
            libui { includeDirs buildDir }
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.CInteropProcess).all {
    dependsOn unpackArchive
}

apply from: "publish.gradle"
