apply plugin: 'konan'

def konanUserDir = System.getenv("KONAN_DATA_DIR") ?: "${System.getProperty("user.home")}/.konan"
def resFile = file("$buildDir/konan/res/samples.res")

konanArtifacts {
    interop('libui') {
        defFile 'libui-ktx/src/main/libui.def'
        includeDirs "${project.rootDir}/libui"
    }

    library('libui-ktx') {
        srcDir 'libui-ktx/src/main/kotlin'
        libraries {
            artifact 'libui'
        }
    }

    program('test') {
        srcDir 'libui-ktx/src/test/kotlin'
        libraries {
            artifact 'libui'
            artifact 'libui-ktx'
        }
        target 'mingw', {
            linkerOpts "$resFile"
            dependsOn 'windowsResources'
            inputs.file resFile
        }
    }

    program('hello1') {
        srcDir 'samples/hello/src/main/kotlin'
        libraries {
            artifact 'libui'
        }
        target 'mingw', {
            linkerOpts "$resFile -mwindows"
            dependsOn 'windowsResources'
            inputs.file resFile
        }
    }

    program('hello2') {
        srcDir 'samples/hello2/src/main/kotlin'
        libraries {
            artifact 'libui-ktx'
        }
        target 'mingw', {
            linkerOpts "$resFile -mwindows"
            dependsOn 'windowsResources'
            inputs.file resFile
        }
    }

    program('sampleForm') {
        srcDir 'samples/form/src/main/kotlin'
        libraries {
            artifact 'libui-ktx'
        }
        target 'mingw', {
            linkerOpts "$resFile -mwindows"
            dependsOn 'windowsResources'
            inputs.file resFile
        }
    }

    program('controlgallery') {
        srcDir 'samples/controlgallery/src/main/kotlin'
        libraries {
            artifact 'libui-ktx'
        }
        target 'mingw', {
            linkerOpts "$resFile -mwindows"
            dependsOn 'windowsResources'
            inputs.file resFile
        }
    }

    program('histogram') {
        srcDir 'samples/histogram/src/main/kotlin'
        libraries {
            artifact 'libui-ktx'
        }
        target 'mingw', {
            linkerOpts "$resFile -mwindows"
            dependsOn 'windowsResources'
            inputs.file resFile
        }
    }

    program('drawtext') {
        srcDir 'samples/drawtext/src/main/kotlin'
        libraries {
            artifact 'libui-ktx'
        }
        target 'mingw', {
            linkerOpts "$resFile -mwindows"
            dependsOn 'windowsResources'
            inputs.file resFile
        }
    }

    program('datetime') {
        srcDir 'samples/datetime/src/main/kotlin'
        libraries {
            artifact 'libui-ktx'
        }
        target 'mingw', {
            linkerOpts "$resFile -mwindows"
            dependsOn 'windowsResources'
            inputs.file resFile
        }
    }

    program('timer') {
        srcDir 'samples/timer/src/main/kotlin'
        libraries {
            artifact 'libui-ktx'
        }
        target 'mingw', {
            linkerOpts "$resFile -mwindows"
            dependsOn 'windowsResources'
            inputs.file resFile
        }
    }

    program('logo') {
        srcDir 'samples/logo/src/main/kotlin'
        libraries {
            artifact 'libui-ktx'
        }
        target 'mingw', {
            linkerOpts "$resFile -mwindows"
            dependsOn 'windowsResources'
            inputs.file resFile
        }
    }

    program('table', targets: ['linux', 'mingw']) {
        //TODO: reenable macos when uiImage will be fixed
        srcDir 'samples/table/src/main/kotlin'
        srcDir 'samples/table/src/main/res'
        libraries {
            artifact 'libui-ktx'
        }
        target 'mingw', {
            linkerOpts "$resFile -mwindows"
            dependsOn 'windowsResources'
            inputs.file resFile
        }
    }
}

task windowsResources (type: Exec) {
    def rcFile = file('samples/samples.rc')
    def path = System.getenv("PATH")

    def windresDir = "$konanUserDir/dependencies/msys2-mingw-w64-x86_64-gcc-7.2.0-clang-llvm-5.0.0-windows-x86-64/bin"

    commandLine "$windresDir/windres", rcFile, '-O', 'coff', '-o', resFile
    environment 'PATH', "$windresDir;$path"

    inputs.file rcFile
    outputs.file resFile
}

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin:0.7.1"
    }
}
